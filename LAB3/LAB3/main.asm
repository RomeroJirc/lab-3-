//******************************************************************************
//Universidad del Valle de Guatemala
//IE2023 Programación de microcontroladores
//Autor : JOSE ROMERO 22171
//Proyecto: LAB 3
//Idescripción
//Hardware: ATMega328P
//Created: 09/02/2024
;**************************
; ENCABEZADO
;**************************

.include "M328PDEF.inc" ; RECONOCER REGISTROS
.cseg
.org 0x00
JMP MAIN	//VECTOR RESET
.org 0x0006	//VECTOR DE ISR: INT0
JMP ISR_PCINT0
.org 0x0020	//VECTOR DE ISR: TIMER0
JMP ISR_TIMER0_OVF

MAIN:
;**************************
//Configuración de la pila
;**************************
	LDI	R16, LOW(RAMEND)
	OUT	SPL, R16 
	LDI	R16, HIGH(RAMEND)
	OUT	SPL, R16
;******************************************************************************
;CONFIGURACIONES
;******************************************************************************
Setup:
;RELOJ
LDI R16, (1 << CLKPCE)
	STS CLKPR, R16 ;HABILITAR PRESCALER

	LDI R16, 0b0000_0001 ;METER ESE VALOR EN BINARIO EN EL REGISTRO R16
	STS CLKPR, R16 ;DEFINIMOS UNA FRECUENCIA DE 8MHz

;LEDS
	LDI R16, (1 << PD1)|(1 << PD2)|(1 << PD3)|(1 << PD4)|(1 << PD5)|(1 << PD6)|(1 << PD7)
	OUT DDRD, R16 ;ESTABLECER SALIDAS DEL DISPLAY

	LDI R16, (1 << PB1)|(1 << PB2)
	OUT DDRB, R16 ;ESTABLECER PB1 y PB2 PARA EL DISPLAY 1 Y 2

	LDI R16, (1 << PC0)|(1 << PC1)|(1 << PC2)|(1 << PC3)
	OUT DDRC, R16 ;PONIENDO A3, A2, A1 y A0 COMO SALIDAS
	LDI R16, 0x00
	OUT PORTC, R16 ;APAGAR PINES

	//LDI R16, 0b1111_1111 ;INGRESAR VALOR A R16
	//OUT DDRD, R16 ;DEFINIR CÓMO SALIDA LOS PUERTOS D

	SBI DDRB, PB5; ESTABLECER PB5 COMO SALIDA
	CBI PORTB, PB5; APAGAR PB5
;BOTONES

	LDI R16, (0<<PB4)|(0<<PB3) 
	OUT DDRB, R16 ;PONIENDO PORTC COMO ENTRADA EN EL BIT PB4/D12 y PB3/D11
	LDI R16, (1<<PB4)|(1<<PB3)
	OUT PORTB, R16 ;Configurando el pines PB4 y PB3 como "pullup activado"

	LDI R16, (1<< PCINT4)|(1<< PCINT3)
	STS PCMSK0, R16 ;CONFIGURANDO INT0 EN FLANCO DE SUBIDA

	SBI PINB, PB1; ENCENDER DISPLAY 2

	LDI R16, (1 << PCIE0)
	STS PCICR, R16; HABILITANDO LA ISR PCINT[7:0]

	SEI ;HABILITAR INTERRUPCIONES GLOBALES GIE

//*****************************************************************************
//OTROS UWU
//*****************************************************************************
	LDI R20, 0x00; CONTADOR EN 0
//YA EN USO REGISTRO 18, 19 y 20
	LDI R21, 0x00 ;DISPLAYS
	LDI R17, 0x00
	LDI R28, 0x00
	LDI R25, 0x00
	TABLA: .DB 0x81, 0xF3, 0x49, 0x61, 0x33, 0x25, 0x05, 0xF1, 0x01, 0x31
	LDI R22, 0x00; UNIDADES
	LDI R23, 0x00; DECENAS
	CALL Init_T0
//*****************************************************************************	
// LOOP
//*****************************************************************************
LOOP:
	//OUT PORTC, R20
	//CPI R21, 50
	//BRNE LOOP
	//CLR R21
	//SBI PINB, PB5
	//RJMP LOOP; VOLVER AL LOOP
	CPI R22, 10
	BREQ RESET1
	CPI R24, 50
	BREQ UNIDADES

		CALL ESPERA
		SBI PINB, PB1
		SBI PINB, PB2

	LDI ZH, HIGH(TABLA << 1)
	LDI ZL, LOW(TABLA << 1)
	ADD ZL, R23
	LPM R25, Z
	OUT PORTD, R25
	CALL ESPERA

	CPI R23, 6
	BREQ RESET2
JMP LOOP ; REGRESAR AL LOOP

ESPERA: 
	LDI R21, 255
	delay:
		DEC R21
		BRNE delay
	LDI R21, 255
	delay1:
		DEC R21
		BRNE delay1 ; SI R21 NO ES IGUAL A 0, SALTAR A DELAY
	LDI R21, 255
	delay2:
		DEC R21 ; DECREMENTAR R21
		BRNE delay2 ;SI R16 NO ES IGUAL A 0, TIRA AL DELAY
	LDI R21, 255
	delay3:
		DEC R21 ;DECREMENTAR R21
		BRNE delay3 ;SI R21 NO ES IGUAL A 0, TIRAR DELAY

	RET

RESET1:
	LDI R22, 0
	INC R23 //SUMAR A LAS DECENAS
	JMP LOOP

UNIDADES: 
	INC R22
	LDI R24, 0
	JMP LOOP

RESET2:
	CALL ESPERA
	LDI R23, 0
	LDI R22, 0
	JMP LOOP

;**************************
; SUBRUTINAS
;**************************

ISR_PCINT0:
	PUSH R16 ;GUARDAR R16
	IN R16, SREG
	PUSH R16; GUARDAMOS EN LA PILA EL REGISTRO SREG

	IN R18, PINB //OBTENER VALORES DE LOS BOTONES

	SBRS R18, PB3
	RJMP CHECKPB2 ;SI ESTA PRECIONADO SALTAR A SUBRUTINA

	SBRS R18, PB4
	RJMP CHECKPB1 ;SI ESTA PRECIONADO SALTAR A SUBRUTINA

	JMP SALIR ; SALTO A LA SUBRUTINA DE SALIDA

	//POP R16	; OBTENER VALOR DE SREG
	//OUT SREG, R16	;RESTAURAR LOS ANTIGUOS VALORES DE SREG
	//POP R16	; OBTENER EL VALOR DE R16
	//RETI	; RETORNAR DE LA ISR


//TABLA: .DB 0x7E, 0x0E, 0xB7, 0x9F, 0xCE, 0xDB, 0xFB, 0x0F, 0xFF, 0xCF, 0xEF, 0xFA, 0x73, 0xBE, 0xF3, 0xE3
//TABLA: .DB 0x81, 0xF3, 0x49, 0x61, 0x33, 0x25, 0x05, 0xF1, 0x01, 0x31, 0x11, 0x07, 0x8D, 0x43, 0x0D, 0x1D
//OPERACION_TABLA:
	//LDI ZH, HIGH(TABLA<<1)
	//LDI ZL, LOW(TABLA<<1)
	//ADD	ZL, R18
	//LPM	R17, Z
	//OUT	PORTD, R17 
	//RET
	CHECKPB1:
	LDI R19, 255
	delai:
		DEC R19
		BRNE delai
	DEC R20
	CPI R20, 0x00 //COMPARA POR SI EL REGISTRO 20 ES IGUAL A 16
	BRNE SALIR// SI NO SON IGUALES SE DIRIGE A LA SUBRUTINA SALIDA
	LDI R20, 0x00//SI SON IGUALES CARGA 0 EN R20

	CHECKPB2:
	LDI R19, 255
	delai1:
		DEC R19
		BRNE delai1
	INC R20
	CPI R20, 0x10
	BRNE SALIR
	LDI R20, 0x0F
	
	SALIR:
	SBI PINB, PB5; TOGGLE LED 5
	SBI PCIFR, PCIF0; APAGAR BANDERA DE ISR PCINT0

	POP R16;	OBTENER EL VALOR DE SREG
	OUT SREG, R16; RESTAURAR LOS ANTIGUOS VALORES DE SREG
	POP R16; OBTENER EL VALOR DE R16
	RETI; RETORNAR PARA INTERRUPCIONES


//INICIALIZAR EL TIMER0
Init_T0:
	LDI R30, 0
	OUT TCCR0A, R30 ; OC0A DESCONECTADO

	LDI R30, (1<<CS02)|(1>>CS00)
	OUT TCCR0B, R30

	LDI R30, 100
	OUT TCNT0, R30

	LDI R30, (1<<TOIE0)
	STS TIMSK0, R30
	RET

//TIMER OVERFLOW
ISR_TIMER0_OVF:
	PUSH R16; GUARDAR EN PILA REGISTRO 16
	IN R16, SREG
	PUSH R16; GUARDAR EN PILA REGISTRO SREG

	LDI R16, 100 ;CARGAR VALOR DE DESBORDAMIENTO
	OUT TCNT0, R16; CARGAR VALOR INICIAL DEL CONTADOR
	SBI TIFR0, TOV0; BORRAR BANDERA DE TOV0
	INC R24

	POP R16 ;OBTENER VALOR DE SREG
	OUT SREG, R16 ; RESTAURAR SREG
	POP R16 ; OBTENER VALOR DE R16
	RETI ;RETORNAR A LA ISR

//*****************************************************************************